coord_cartesian(clip = "off") +
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, hjust = 1, vjust = 0),
axis.text.x      = element_text(size = 9, color = "black"),
axis.text.y      = element_blank(),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title.x     = element_text(size = 12),
axis.title.y     = element_blank(),
plot.title       = element_text(size = 10, color = "white"),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.25, .2, .075, .3), "cm")) +
guides(color = F, size = F, shape = guide_legend(override.aes = list(size =  2, stroke = .5))) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_along}", x = "Transaction", y = "P(Buy)") +
transition_reveal(trial)
demand_gif      = animate(demand_animation, fps = 5, renderer = magick_renderer(),
width = 4.25, height = 11, units = "cm", res = 300)
probability_gif = animate(probability_animation, fps = 5, renderer = magick_renderer(),
width = 4, height = 11, units = "cm", res = 300)
anim_save(here("Plots", "demand.gif"), demand_gif)
anim_save(here("Plots", "probability.gif"), probability_gif)
demand_mgif      = image_read(here("Plots", "demand.gif"))
probability_mgif = image_read(here("Plots", "probability.gif"))
new_gif = image_append(c(demand_mgif[1], probability_mgif[1]))
for(i in 2:100){
combined = image_append(c(demand_mgif[i], probability_mgif[i]))
new_gif = c(new_gif, combined)
}
anim_save(here("Plots", "demand_probability.gif"), new_gif)
probability_animation = individuals %>%
make_condition_label(stacked = F) %>%
ggplot(aes(x = trial, y = prob.buy, color = condition_lab)) +
# geoms
geom_line() +
geom_point() +
# scales
scale_shape_manual(values = c(21, 16)) +
scale_x_continuous(limits = c(0,100), expand = expansion(add = c(1, 2.5)), n.breaks = 5) +
scale_y_continuous(limits = c(0,1.05), expand = c(0,0), breaks = c(0, .5, 1),
labels = c("0%", "50%", "100%")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# themes
labs(x = "Transaction", y = "P(Buy)") +
coord_cartesian(clip = "off") +
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, hjust = 1, vjust = -.5),
axis.text.x      = element_text(size = 9, color = "black"),
axis.text.y      = element_blank(),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title.x     = element_text(size = 12),
axis.title.y     = element_blank(),
plot.title       = element_text(size = 10, color = "white"),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.25, .2, .075, .3), "cm")) +
guides(color = F, size = F, shape = guide_legend(override.aes = list(size =  2, stroke = .5))) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_along}", x = "Transaction", y = "P(Buy)") +
transition_reveal(trial)
demand_gif      = animate(demand_animation, fps = 5, renderer = magick_renderer(),
width = 4.25, height = 11, units = "cm", res = 300)
probability_gif = animate(probability_animation, fps = 5, renderer = magick_renderer(),
width = 4, height = 11, units = "cm", res = 300)
anim_save(here("Plots", "demand.gif"), demand_gif)
anim_save(here("Plots", "probability.gif"), probability_gif)
demand_mgif      = image_read(here("Plots", "demand.gif"))
probability_mgif = image_read(here("Plots", "probability.gif"))
new_gif = image_append(c(demand_mgif[1], probability_mgif[1]))
for(i in 2:100){
combined = image_append(c(demand_mgif[i], probability_mgif[i]))
new_gif = c(new_gif, combined)
}
anim_save(here("Plots", "demand_probability.gif"), new_gif)
demand_animation = demand %>%
make_condition_label(stacked = F) %>%
mutate(transaction_label = case_when(transaction == "Successful Transaction" ~ "S",
transaction == "Failed Transaction" ~ "F")) %>%
ggplot(aes(x = log_price, color = condition_lab)) +
# GEOMS
geom_text_npc(aes(npcx = "left", npcy = "bottom", label = transaction_label), size = 5,
inherit.aes = F) +
geom_line(aes(y = Q), linewidth = .75) +
geom_vline(xintercept = log10(calculate_price(.0025)),
linetype = "dotted", linewidth = .75) +
# SCALES
scale_x_continuous(expand = c(0, 0), limits = c(log10(price_ranges[1]), log10(price_ranges[2])),
breaks = log10(c(.10, 5, 250)),
labels = c("$.10", "$5", "$250")) +
scale_y_continuous(limits = c(0,105), expand = c(0,0),
breaks = c(0, 50, 100),
labels = c("0%", "50%", "100%")) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# THEMES
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, color = "white", hjust = 1, vjust = 0),
axis.text        = element_text(size = 9, color = "black"),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title       = element_text(size = 12),
plot.title       = element_text(size = 10, hjust = .3, vjust = -8),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .2, .075, .3), "cm")) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_time}", x = "Unit Price", y = "P(Buy)") +
transition_time(trial) +
exit_fade()
probability_animation = individuals %>%
make_condition_label(stacked = F) %>%
ggplot(aes(x = trial, y = prob.buy, color = condition_lab)) +
# geoms
geom_line() +
geom_point() +
# scales
scale_shape_manual(values = c(21, 16)) +
scale_x_continuous(limits = c(0,100), expand = expansion(add = c(1, 2.5)), n.breaks = 5) +
scale_y_continuous(limits = c(0,1.05), expand = c(0,0), breaks = c(0, .5, 1),
labels = c("0%", "50%", "100%")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# themes
labs(x = "Transaction", y = "P(Buy)") +
coord_cartesian(clip = "off") +
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, hjust = 1, vjust = -.5),
axis.text.x      = element_text(size = 9, color = "black"),
axis.text.y      = element_blank(),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title.x     = element_text(size = 12),
axis.title.y     = element_blank(),
plot.title       = element_text(size = 10, color = "white"),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .2, .075, .3), "cm")) +
guides(color = F, size = F, shape = guide_legend(override.aes = list(size =  2, stroke = .5))) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_along}", x = "Transaction", y = "P(Buy)") +
transition_reveal(trial)
demand_gif      = animate(demand_animation, fps = 5, renderer = magick_renderer(),
width = 4.25, height = 11, units = "cm", res = 300)
probability_gif = animate(probability_animation, fps = 5, renderer = magick_renderer(),
width = 4, height = 11, units = "cm", res = 300)
anim_save(here("Plots", "demand.gif"), demand_gif)
anim_save(here("Plots", "probability.gif"), probability_gif)
demand_mgif      = image_read(here("Plots", "demand.gif"))
probability_mgif = image_read(here("Plots", "probability.gif"))
new_gif = image_append(c(demand_mgif[1], probability_mgif[1]))
for(i in 2:100){
combined = image_append(c(demand_mgif[i], probability_mgif[i]))
new_gif = c(new_gif, combined)
}
anim_save(here("Plots", "demand_probability.gif"), new_gif)
demand_animation = demand %>%
make_condition_label(stacked = F) %>%
mutate(transaction_label = case_when(transaction == "Successful Transaction" ~ "S",
transaction == "Failed Transaction" ~ "F")) %>%
ggplot(aes(x = log_price, color = condition_lab)) +
# GEOMS
geom_text_npc(aes(npcx = "left", npcy = "bottom", label = transaction_label), size = 5,
inherit.aes = F) +
geom_line(aes(y = Q), linewidth = .75) +
geom_vline(xintercept = log10(calculate_price(.0025)),
linetype = "dotted", linewidth = .75) +
# SCALES
scale_x_continuous(expand = c(0, 0), limits = c(log10(price_ranges[1]), log10(price_ranges[2])),
breaks = log10(c(.10, 5, 250)),
labels = c("$.10", "$5", "$250")) +
scale_y_continuous(limits = c(0,105), expand = c(0,0),
breaks = c(0, 50, 100),
labels = c("0%", "50%", "100%")) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# THEMES
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, color = "white", hjust = 1, vjust = 0),
axis.text        = element_text(size = 9, color = "black"),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title       = element_text(size = 12),
plot.title       = element_text(size = 10, hjust = .5, vjust = -8),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .2, .075, .3), "cm")) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_time}", x = "Unit Price", y = "P(Buy)") +
transition_time(trial) +
exit_fade()
probability_animation = individuals %>%
make_condition_label(stacked = F) %>%
ggplot(aes(x = trial, y = prob.buy, color = condition_lab)) +
# geoms
geom_line() +
geom_point() +
# scales
scale_shape_manual(values = c(21, 16)) +
scale_x_continuous(limits = c(0,100), expand = expansion(add = c(1, 2.5)), n.breaks = 5) +
scale_y_continuous(limits = c(0,1.05), expand = c(0,0), breaks = c(0, .5, 1),
labels = c("0%", "50%", "100%")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# themes
labs(x = "Transaction", y = "P(Buy)") +
coord_cartesian(clip = "off") +
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, hjust = 1, vjust = -.5),
axis.text.x      = element_text(size = 9, color = "black"),
axis.text.y      = element_blank(),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title.x     = element_text(size = 12),
axis.title.y     = element_blank(),
plot.title       = element_text(size = 10, color = "white"),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .2, .075, .3), "cm")) +
guides(color = F, size = F, shape = guide_legend(override.aes = list(size =  2, stroke = .5))) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_along}", x = "Transaction", y = "P(Buy)") +
transition_reveal(trial)
demand_gif      = animate(demand_animation, fps = 5, renderer = magick_renderer(),
width = 4.25, height = 11, units = "cm", res = 300)
probability_gif = animate(probability_animation, fps = 5, renderer = magick_renderer(),
width = 4, height = 11, units = "cm", res = 300)
anim_save(here("Plots", "demand.gif"), demand_gif)
anim_save(here("Plots", "probability.gif"), probability_gif)
demand_mgif      = image_read(here("Plots", "demand.gif"))
probability_mgif = image_read(here("Plots", "probability.gif"))
new_gif = image_append(c(demand_mgif[1], probability_mgif[1]))
for(i in 2:100){
combined = image_append(c(demand_mgif[i], probability_mgif[i]))
new_gif = c(new_gif, combined)
}
anim_save(here("Plots", "demand_probability.gif"), new_gif)
demand_animation = demand %>%
make_condition_label(stacked = F) %>%
mutate(transaction_label = case_when(transaction == "Successful Transaction" ~ "S",
transaction == "Failed Transaction" ~ "F")) %>%
ggplot(aes(x = log_price, color = condition_lab)) +
# GEOMS
geom_text_npc(aes(npcx = "left", npcy = "bottom", label = transaction_label), size = 5,
inherit.aes = F) +
geom_line(aes(y = Q), linewidth = .75) +
geom_vline(xintercept = log10(calculate_price(.0025)),
linetype = "dotted", linewidth = .75) +
# SCALES
scale_x_continuous(expand = c(0, 0), limits = c(log10(price_ranges[1]), log10(price_ranges[2])),
breaks = log10(c(.10, 5, 250)),
labels = c("$.10", "$5", "$250")) +
scale_y_continuous(limits = c(0,105), expand = c(0,0),
breaks = c(0, 50, 100),
labels = c("0%", "50%", "100%")) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# THEMES
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, color = "white", hjust = 1, vjust = 0),
axis.text        = element_text(size = 9, color = "black"),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title       = element_text(size = 12),
plot.title       = element_text(size = 10, hjust = 01, vjust = -8),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .2, .075, .3), "cm")) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_time}", x = "Unit Price", y = "P(Buy)") +
transition_time(trial) +
exit_fade()
probability_animation = individuals %>%
make_condition_label(stacked = F) %>%
ggplot(aes(x = trial, y = prob.buy, color = condition_lab)) +
# geoms
geom_line() +
geom_point() +
# scales
scale_shape_manual(values = c(21, 16)) +
scale_x_continuous(limits = c(0,100), expand = expansion(add = c(1, 2.5)), n.breaks = 5) +
scale_y_continuous(limits = c(0,1.05), expand = c(0,0), breaks = c(0, .5, 1),
labels = c("0%", "50%", "100%")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# themes
labs(x = "Transaction", y = "P(Buy)") +
coord_cartesian(clip = "off") +
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, hjust = 1, vjust = -.5),
axis.text.x      = element_text(size = 9, color = "black"),
axis.text.y      = element_blank(),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title.x     = element_text(size = 12),
axis.title.y     = element_blank(),
plot.title       = element_text(size = 10, color = "white"),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .2, .075, .3), "cm")) +
guides(color = F, size = F, shape = guide_legend(override.aes = list(size =  2, stroke = .5))) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_along}", x = "Transaction", y = "P(Buy)") +
transition_reveal(trial)
demand_gif      = animate(demand_animation, fps = 5, renderer = magick_renderer(),
width = 4.5, height = 11, units = "cm", res = 300)
probability_gif = animate(probability_animation, fps = 5, renderer = magick_renderer(),
width = 4.25, height = 11, units = "cm", res = 300)
anim_save(here("Plots", "demand.gif"), demand_gif)
anim_save(here("Plots", "probability.gif"), probability_gif)
demand_mgif      = image_read(here("Plots", "demand.gif"))
probability_mgif = image_read(here("Plots", "probability.gif"))
new_gif = image_append(c(demand_mgif[1], probability_mgif[1]))
for(i in 2:100){
combined = image_append(c(demand_mgif[i], probability_mgif[i]))
new_gif = c(new_gif, combined)
}
anim_save(here("Plots", "demand_probability.gif"), new_gif)
demand_animation = demand %>%
make_condition_label(stacked = F) %>%
mutate(transaction_label = case_when(transaction == "Successful Transaction" ~ "S",
transaction == "Failed Transaction" ~ "F")) %>%
ggplot(aes(x = log_price, color = condition_lab)) +
# GEOMS
geom_text_npc(aes(npcx = "left", npcy = "bottom", label = transaction_label), size = 5,
inherit.aes = F) +
geom_line(aes(y = Q), linewidth = .75) +
geom_vline(xintercept = log10(calculate_price(.0025)),
linetype = "dotted", linewidth = .75) +
# SCALES
scale_x_continuous(expand = c(0, 0), limits = c(log10(price_ranges[1]), log10(price_ranges[2])),
breaks = log10(c(.10, 5, 250)),
labels = c("$.10", "$5", "$250")) +
scale_y_continuous(limits = c(0,105), expand = c(0,0),
breaks = c(0, 50, 100),
labels = c("0%", "50%", "100%")) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# THEMES
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, color = "white", hjust = 1, vjust = 0),
axis.text        = element_text(size = 9, color = "black"),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title       = element_text(size = 12),
plot.title       = element_text(size = 10, hjust = 0, vjust = -8),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .2, .075, .3), "cm")) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_time}", x = "Unit Price", y = "P(Buy)") +
transition_time(trial) +
exit_fade()
probability_animation = individuals %>%
make_condition_label(stacked = F) %>%
ggplot(aes(x = trial, y = prob.buy, color = condition_lab)) +
# geoms
geom_line() +
geom_point() +
# scales
scale_shape_manual(values = c(21, 16)) +
scale_x_continuous(limits = c(0,100), expand = expansion(add = c(1, 2.5)), n.breaks = 5) +
scale_y_continuous(limits = c(0,1.05), expand = c(0,0), breaks = c(0, .5, 1),
labels = c("0%", "50%", "100%")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# themes
labs(x = "Transaction", y = "P(Buy)") +
coord_cartesian(clip = "off") +
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, hjust = 1, vjust = -.5),
axis.text.x      = element_text(size = 9, color = "black"),
axis.text.y      = element_blank(),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title.x     = element_text(size = 12),
axis.title.y     = element_blank(),
plot.title       = element_text(size = 10, color = "white"),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .2, .075, .3), "cm")) +
guides(color = F, size = F, shape = guide_legend(override.aes = list(size =  2, stroke = .5))) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_along}", x = "Transaction", y = "P(Buy)") +
transition_reveal(trial)
demand_gif      = animate(demand_animation, fps = 5, renderer = magick_renderer(),
width = 4.5, height = 11, units = "cm", res = 300)
probability_gif = animate(probability_animation, fps = 5, renderer = magick_renderer(),
width = 4.25, height = 11, units = "cm", res = 300)
anim_save(here("Plots", "demand.gif"), demand_gif)
anim_save(here("Plots", "probability.gif"), probability_gif)
demand_mgif      = image_read(here("Plots", "demand.gif"))
probability_mgif = image_read(here("Plots", "probability.gif"))
new_gif = image_append(c(demand_mgif[1], probability_mgif[1]))
for(i in 2:100){
combined = image_append(c(demand_mgif[i], probability_mgif[i]))
new_gif = c(new_gif, combined)
}
anim_save(here("Plots", "demand_probability.gif"), new_gif)
demand_animation = demand %>%
make_condition_label(stacked = F) %>%
mutate(transaction_label = case_when(transaction == "Successful Transaction" ~ "S",
transaction == "Failed Transaction" ~ "F")) %>%
ggplot(aes(x = log_price, color = condition_lab)) +
# GEOMS
geom_text_npc(aes(npcx = "left", npcy = "bottom", label = transaction_label), size = 5,
inherit.aes = F) +
geom_line(aes(y = Q), linewidth = .75) +
geom_vline(xintercept = log10(calculate_price(.0025)),
linetype = "dotted", linewidth = .75) +
# SCALES
scale_x_continuous(expand = c(0, 0), limits = c(log10(price_ranges[1]), log10(price_ranges[2])),
breaks = log10(c(.10, 5, 250)),
labels = c("$.10", "$5", "$250")) +
scale_y_continuous(limits = c(0,105), expand = c(0,0),
breaks = c(0, 50, 100),
labels = c("0%", "50%", "100%")) +
scale_linetype_manual(values = c("solid", "dashed")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# THEMES
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, color = "white", hjust = 1, vjust = 0),
axis.text        = element_text(size = 9, color = "black"),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title       = element_text(size = 12),
plot.title       = element_text(size = 10, hjust = 0, vjust = -8),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .3, .075, .3), "cm")) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_time}", x = "Unit Price", y = "P(Buy)") +
transition_time(trial) +
exit_fade()
probability_animation = individuals %>%
make_condition_label(stacked = F) %>%
ggplot(aes(x = trial, y = prob.buy, color = condition_lab)) +
# geoms
geom_line() +
geom_point() +
# scales
scale_shape_manual(values = c(21, 16)) +
scale_x_continuous(limits = c(0,100), expand = expansion(add = c(1, 2.5)), n.breaks = 5) +
scale_y_continuous(limits = c(0,1.05), expand = c(0,0), breaks = c(0, .5, 1),
labels = c("0%", "50%", "100%")) +
scale_color_manual(values = c("purple2", "goldenrod3", "green3", "dodgerblue3")) +
# themes
labs(x = "Transaction", y = "P(Buy)") +
coord_cartesian(clip = "off") +
theme_classic() +
theme(legend.position  = "none",
strip.background = element_rect(fill = "transparent", colour = "transparent"),
strip.text       = element_text(size = 10, hjust = 1, vjust = -.5),
axis.text.x      = element_text(size = 9, color = "black"),
axis.text.y      = element_blank(),
axis.line        = element_line(linewidth = .75),
axis.ticks       = element_line(linewidth = .75, color = "black"),
axis.title.x     = element_text(size = 12),
axis.title.y     = element_blank(),
plot.title       = element_text(size = 10, color = "white"),
panel.spacing.x  = unit(.15, "cm"),
panel.spacing.y  = unit(.05, "cm"),
plot.margin = unit(c(-.75, .3, .075, .3), "cm")) +
guides(color = F, size = F, shape = guide_legend(override.aes = list(size =  2, stroke = .5))) +
facet_rep_wrap(condition_lab~., nrow = 4) +
# animation
labs(title = "Transaction: {frame_along}", x = "Transaction", y = "P(Buy)") +
transition_reveal(trial)
demand_gif      = animate(demand_animation, fps = 5, renderer = magick_renderer(),
width = 4.625, height = 11, units = "cm", res = 300)
probability_gif = animate(probability_animation, fps = 5, renderer = magick_renderer(),
width = 4.375, height = 11, units = "cm", res = 300)
anim_save(here("Plots", "demand.gif"), demand_gif)
anim_save(here("Plots", "probability.gif"), probability_gif)
demand_mgif      = image_read(here("Plots", "demand.gif"))
probability_mgif = image_read(here("Plots", "probability.gif"))
new_gif = image_append(c(demand_mgif[1], probability_mgif[1]))
for(i in 2:100){
combined = image_append(c(demand_mgif[i], probability_mgif[i]))
new_gif = c(new_gif, combined)
}
anim_save(here("Plots", "demand_probability.gif"), new_gif)
